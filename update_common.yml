---
- hosts: webservers
  become: yes
  become_user: root
  become_method: sudo

  tasks:
  - name: Installation des paquets communs Ã  tous les serveurs
    apt:
      update_cache: yes
      state: latest
      name: ['glances', 'pwgen', 'sudo', 'tar', 'unzip', 'vim', 'whois']

  - name: maj os
    apt :
      upgrade: yes
      update_cache: yes

  - name: fail2ban
    apt:
      pkg: fail2ban
      state: present


  - name: Install prerequisites
    apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
    tags: [ system ]

  - name: Install LAMP Packages
    apt: name={{ item }} update_cache=yes state=latest
    loop: [ 'apache2', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php' ]
    tags: [ system ]

  - name: Install PHP Extensions
    apt: name={{ item }} update_cache=yes state=latest
    loop: "{{ php_modules }}"
    tags: [ system ]

  # Apache Configuration
  - name: Create document root
    file:
      path: "/var/www/{{ http_host }}"
      state: directory 
      owner: "www-data"
      group: "www-data"
      mode: '0755'
    tags: [ apache ]

  - name: Set up Apache VirtualHost
    template:
      src: "files/apache.conf.j2"
      dest: "/etc/apache2/sites-available/{{ http_conf }}"
    notify: Reload Apache
    tags: [ apache ]

  - name: Enable rewrite module
    shell: /usr/sbin/a2enmod rewrite
    notify: Reload Apache
    tags: [ apache ]

  - name: Enable new site
    shell: /usr/sbin/a2ensite {{ http_conf }}
    notify: Reload Apache
    tags: [ apache ]

  - name: Disable default Apache site
    shell: /usr/sbin/a2dissite 000-default.conf
    notify: Restart Apache
    tags: [ apache ]

  # MySQL Configuration
  - name: Set the root password
    mysql_user:
      name: root
      password: "{{ mysql_root_password }}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    tags: [ mysql, mysql-root ]

  - name: Remove all anonymous user accounts
    mysql_user:
      name: ''
      host_all: yes
      state: absent
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

  - name: Remove the MySQL test database
    mysql_db:
      name: test
      state: absent
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

  - name: Creates database for WordPress
    mysql_db:
      name: "{{ mysql_db }}"
      state: present
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

  - name: Create MySQL user for WordPress
    mysql_user:
      name: "{{ mysql_user }}"
      password: "{{ mysql_password }}"
      priv: "{{ mysql_db }}.*:ALL"
      state: present
      login_user: root
      login_password: "{{ mysql_root_password }}"
    tags: [ mysql ]

  # UFW Configuration
  - name: "UFW - Allow HTTP on port {{ http_port }}"
    ufw:
      rule: allow
      port: "{{ http_port }}"
      proto: tcp
    tags: [ system ]

  # WordPress Configuration
  - name: Download and unpack latest WordPress
    unarchive:
      src: https://wordpress.org/latest.tar.gz
      dest: "/var/www/{{ http_host }}"
      remote_src: yes
      creates: "/var/www/{{ http_host }}/wordpress" 
    tags: [ wordpress ]

  - name: Set ownership
    file:
      path: "/var/www/{{ http_host }}" 
      state: directory
      recurse: yes
      owner: www-data
      group: www-data
    tags: [ wordpress ]

  - name: Set permissions for directories
    shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
    tags: [ wordpress ]

  - name: Set permissions for files
    shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
    tags: [ wordpress ]

  - name: Set up wp-config
    template:
      src: "files/wp-config.php.j2"
      dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
    tags: [ wordpress ]

  handlers:
  - name: Reload Apache
    service:
      name: apache2
      state: reloaded

  - name: Restart Apache
    service:
      name: apache2
      state: restarted

  - name: ensure ufw installed
    apt:
      name: ufw
      update_cache: true
      
  - name: ufw deny incoming
    ufw:
      direction: incoming
      proto: any
      policy: deny
      notify:
      - reload ufw

  - name: ufw allow outgoing
    ufw:
      direction: outgoing
      proto: any
      policy: allow
      notify:
      - reload ufw

  - name: ufw allow OpenSSH
    ufw:
      rule: allow
      name: OpenSSH
      notify:
      - reload ufw

  - name: Setup | set user password
      shell: usermod -p $(echo '{{ createpassword }}' | openssl passwd -1 -stdin) {{ createuser }}
      sudo: true
 
  - name: Setup | authorized key upload
        authorized_key: user={{ createuser }}
        key="{{ lookup('file', 'mypublickey.pub') }}"
        path='/home/{{ createuser }}/.ssh/authorized_keys'
        manage_dir=no
      sudo: true
 
  - name: Sudoers | update sudoers file and validate
      lineinfile: "dest=/etc/sudoers
        insertafter=EOF
        line='{{ createuser }} ALL=(ALL) NOPASSWD: ALL'
        regexp='{{ createuser }} ALL=(ALL) NOPASSWD: ALL'
        state=present"
    sudo: true

  -name: Nextcloud
   roles: 
     - role: aalaesar.install_nextcloud

  -name: Dolibarr
   roles: 
     - { role : infOpen.dolibarr }
   
